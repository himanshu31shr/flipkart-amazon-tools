{
  "id": "snapshot_1758857169568_2o5cg4rtu",
  "approvalId": "approval_1758857169566_ss32f3v1r",
  "approvalTitle": "Design Document for Category Linking Cascade Deduction",
  "version": 1,
  "timestamp": "2025-09-26T03:26:09.568Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nThe Category Linking Cascade Deduction feature extends the existing inventory management system by enabling categories to specify other categories that should have inventory deducted when orders are processed. This creates a cascade deduction system where processing an order for a primary category (e.g., \"Laptop Assembly\") automatically triggers inventory deductions from linked categories (e.g., \"Processors\", \"RAM\", \"Packaging\") using their existing `inventoryDeductionQuantity` configurations.\n\nThe design leverages the current category-based inventory system and InventoryOrderProcessor workflow, adding a simple linking mechanism that maintains consistency with existing deduction patterns while enabling complex inventory relationships.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n\n**TypeScript and React Patterns**: The design follows strict TypeScript typing with React functional components and Material-UI design system. All new components will use the established patterns of Redux Toolkit for state management and React Hook Form for form handling.\n\n**Firebase Integration**: Extends the existing FirebaseService pattern with CategoryService enhancements, maintaining the established service inheritance model and Firebase transactions for data consistency.\n\n**Client-Side Processing**: Maintains the client-side approach with validation and business logic handled in services, following the established security model of keeping sensitive operations on the client side.\n\n**Performance Requirements**: Designed to meet the <2 second response time requirement for dashboard queries, with circular dependency validation completing within 500ms for complex category hierarchies.\n\n### Project Structure (structure.md)\n\n**Feature-Based Organization**: New components will be added to `src/pages/categories/components/` following the established feature-first structure. Category linking UI components will be colocated with existing category management components.\n\n**Service Layer Extension**: CategoryService will be enhanced with linking methods following the established service class organization pattern (public API methods, private helpers, error handling utilities).\n\n**Type Definitions**: New interfaces will be added to `src/types/category.ts` following the established naming conventions and TypeScript patterns.\n\n**Testing Structure**: Tests will be colocated following the `__tests__/` directory pattern with comprehensive unit and integration test coverage.\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n\n- **CategoryService**: Will be extended with new linking methods while maintaining existing API compatibility\n- **InventoryOrderProcessor**: Current cascade deduction logic will be enhanced to process category links\n- **CategoryGroupService**: `updateInventory()` method will be reused for processing cascade deductions\n- **Material-UI DataTable patterns**: Existing category management tables will be extended for link management\n- **ValidationResult interfaces**: Current validation patterns will be reused for link validation\n- **CategoryForm components**: Existing form patterns will be extended for link configuration\n\n### Integration Points\n\n- **Existing Category Management**: Link management will be integrated into current category CRUD workflows\n- **Current Deduction System**: Cascade deductions will use existing `inventoryDeductionQuantity` and CategoryGroup inventory tracking\n- **Order Processing Pipeline**: InventoryOrderProcessor will be enhanced to process both primary and cascade deductions\n- **Firebase Data Model**: Category documents will be extended with `linkedCategories` array field for backward compatibility\n\n## Architecture\n\nThe design follows a **Service-Oriented Architecture** with clear separation between data access, business logic, and presentation layers. The linking system is implemented as an extension to the existing category management system rather than a separate module, ensuring consistency and reusability.\n\n### Modular Design Principles\n\n- **Single File Responsibility**: CategoryLinkingService handles all linking operations, CircularDependencyValidator handles dependency validation\n- **Component Isolation**: CategoryLinkManager component focuses solely on link CRUD operations, separate from category form logic\n- **Service Layer Separation**: Business logic for link validation and cascade processing isolated in services\n- **Utility Modularity**: Circular dependency validation extracted to focused, reusable utility module\n\n```mermaid\ngraph TD\n    A[CategoryForm] --> B[CategoryLinkManager]\n    B --> C[CategoryService]\n    C --> D[CircularDependencyValidator]\n    \n    E[InventoryOrderProcessor] --> F[CategoryService.getLinkedCategories]\n    F --> G[CategoryGroupService.updateInventory]\n    \n    H[Order Processing] --> E\n    E --> I[Primary Deduction]\n    E --> J[Cascade Deductions]\n    \n    K[CategoryLinkPreview] --> L[DeductionCalculator]\n    L --> M[InventoryImpactAnalyzer]\n```\n\n## Components and Interfaces\n\n### CategoryLinkManager Component\n- **Purpose:** Manage category-to-category linking relationships through an intuitive interface\n- **Interfaces:** Props for category ID, onLinksChanged callback, validation error display\n- **Dependencies:** CategoryService for CRUD operations, Material-UI for consistent styling\n- **Reuses:** Existing DataTable patterns, validation error display components, confirmation dialogs\n\n### CircularDependencyValidator Utility\n- **Purpose:** Validate category linking operations to prevent circular dependencies\n- **Interfaces:** `validateLink(sourceId, targetId)`, `checkCircularDependency(categoryId, visited)`\n- **Dependencies:** CategoryService for category data access\n- **Reuses:** Existing validation pattern interfaces, error handling utilities\n\n### DeductionPreviewModal Component\n- **Purpose:** Display cascade deduction impact before order processing\n- **Interfaces:** Props for order items, preview data, onConfirm/onCancel callbacks\n- **Dependencies:** InventoryOrderProcessor for deduction calculations\n- **Reuses:** Existing modal patterns, inventory display components, warning indicators\n\n### Enhanced InventoryOrderProcessor\n- **Purpose:** Process both primary and cascade deductions during order processing\n- **Interfaces:** Existing `processOrderWithCategoryDeduction()` enhanced with cascade logic\n- **Dependencies:** CategoryService for link data, CategoryGroupService for inventory updates\n- **Reuses:** Current deduction processing pipeline, error handling, audit trail logging\n\n## Data Models\n\n### CategoryLink Interface\n```typescript\ninterface CategoryLink {\n  categoryId: string;           // Target category to deduct from\n  isActive?: boolean;          // Allow temporary disable without deletion\n  createdAt?: Timestamp;       // When link was created\n}\n```\n\n### Enhanced Category Interface\n```typescript\ninterface Category {\n  // ... existing fields\n  linkedCategories?: CategoryLink[];  // Array of linked categories\n}\n```\n\n### DeductionPreview Interface\n```typescript\ninterface DeductionPreview {\n  primaryDeductions: DeductionItem[];\n  cascadeDeductions: CascadeDeductionItem[];\n  warnings: string[];\n  inventoryImpacts: InventoryImpact[];\n}\n\ninterface CascadeDeductionItem {\n  sourceCategory: string;\n  targetCategory: string;\n  targetGroup: string;\n  quantity: number;\n  unit: string;\n  resultingInventory: number;\n}\n```\n\n## Error Handling\n\n### Error Scenarios\n\n1. **Circular Dependency Detection**\n   - **Handling:** Pre-validation before link creation, comprehensive dependency traversal\n   - **User Impact:** Clear error message with dependency chain visualization, link creation blocked\n\n2. **Invalid Target Category**\n   - **Handling:** Validation ensures target category exists and has group assignment\n   - **User Impact:** Helpful error message suggesting category group assignment steps\n\n3. **Cascade Deduction Failures**\n   - **Handling:** Atomic transaction rollback, detailed error logging, partial failure recovery\n   - **User Impact:** Clear indication of which deductions failed, option to retry or proceed with warnings\n\n4. **Missing Inventory Configuration**\n   - **Handling:** Validation checks for `inventoryDeductionQuantity` and category group assignment\n   - **User Impact:** Guided setup flow to configure required inventory settings\n\n## Testing Strategy\n\n### Unit Testing\n\n**CategoryService Link Methods**: Test CRUD operations for category links, validation logic, error handling\n- `addCategoryLink()` with valid and invalid inputs\n- `removeCategoryLink()` with existing and non-existing links\n- `getLinkedCategories()` data retrieval and formatting\n\n**CircularDependencyValidator**: Test dependency detection algorithms\n- Direct circular dependencies (A→B→A)\n- Indirect circular dependencies (A→B→C→A)\n- Complex chain validation with multiple levels\n- Performance testing with large category hierarchies\n\n**Cascade Deduction Logic**: Test InventoryOrderProcessor enhancements\n- Single category with multiple links\n- Multiple categories each with links\n- Mixed units and decimal quantities\n- Error scenarios and rollback behavior\n\n### Integration Testing\n\n**End-to-End Link Management**: Test complete workflow from link creation to order processing\n- Create category links through UI\n- Process orders and verify cascade deductions\n- Handle validation errors and user corrections\n- Verify inventory accuracy across all affected groups\n\n**Database Transaction Integrity**: Test Firebase transaction behavior\n- Concurrent link modifications\n- Partial failure recovery\n- Data consistency after errors\n- Audit trail completeness\n\n### End-to-End Testing\n\n**Real-World Business Scenarios**: Test complex business workflows\n- Manufacturing assembly process (components + packaging + materials)\n- Retail kit sales (multiple product categories)\n- Service delivery (hardware + consumables + labor tracking)\n\n**Performance and Scalability**: Test system behavior with realistic data volumes\n- 100+ categories with complex linking relationships\n- Large order batches with extensive cascade effects\n- UI responsiveness during complex operations\n- Memory usage during deep dependency validation",
  "fileStats": {
    "size": 10254,
    "lines": 207,
    "lastModified": "2025-09-26T03:26:02.875Z"
  },
  "comments": []
}