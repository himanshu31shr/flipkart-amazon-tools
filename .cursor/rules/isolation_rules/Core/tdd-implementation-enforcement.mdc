---
description: 
globs: 
alwaysApply: false
---
# TDD IMPLEMENTATION ENFORCEMENT

> **TL;DR:** This rule enforces mandatory Test-Driven Development (TDD) practices across ALL implementation phases for ALL complexity levels. NO implementation code can be written without following the Red-Green-Refactor cycle.

## üö® MANDATORY TDD PROTOCOL

```mermaid
graph TD
    Start["Implementation<br>Request"] --> Block["üö® IMPLEMENTATION<br>BLOCKED"]
    Block --> TestFirst{"Has failing<br>test been written?"}
    TestFirst -->|"No"| WriteTest["MANDATORY:<br>Write Failing Test"]
    TestFirst -->|"Yes"| ShowFailure["Show Test<br>Failure Output"]
    
    WriteTest --> ShowFailure
    ShowFailure --> MinImpl["Write MINIMAL<br>Implementation"]
    MinImpl --> RunTest["Run Tests"]
    RunTest --> TestPass{"Tests<br>Passing?"}
    
    TestPass -->|"No"| FixImpl["Fix Implementation<br>(Stay Minimal)"]
    FixImpl --> RunTest
    TestPass -->|"Yes"| Refactor["Refactor<br>(Optional)"]
    Refactor --> Complete["Implementation<br>Allowed"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style Block fill:#ff4444,stroke:#cc0000,color:white
    style WriteTest fill:#ff6666,stroke:#ff0000,color:white
    style Complete fill:#44ff44,stroke:#00cc00,color:white
```

## üîí IMPLEMENTATION GATE ENFORCEMENT

### LEVEL 1: Quick Bug Fix TDD

```markdown
## TDD Protocol for Level 1 (Quick Fixes)

### MANDATORY STEPS:
1. **üî¥ RED PHASE:**
   - Write smallest possible failing test that reproduces the bug
   - Show test failure output
   - Document the failing behavior

2. **üü¢ GREEN PHASE:**
   - Write minimal code to make test pass
   - Verify fix works for the specific issue
   - Run all related tests

3. **üîµ REFACTOR PHASE:**
   - Clean up implementation if needed
   - Ensure no regressions introduced
   - Update documentation

### ENFORCEMENT CHECKPOINT:
```
üö® LEVEL 1 TDD CHECKPOINT
- Failing test written before fix? [YES/NO]
- Test failure output documented? [YES/NO]
- Minimal implementation written? [YES/NO]
- All tests now passing? [YES/NO]
- Refactoring completed (if needed)? [YES/NO]

‚õî BLOCKED: If any NO - Return to TDD cycle
‚úÖ ALLOWED: If all YES - Proceed with documentation
```
```

### LEVEL 2: Simple Enhancement TDD

```markdown
## TDD Protocol for Level 2 (Simple Enhancements)

### MANDATORY STEPS PER SUBTASK:
1. **üî¥ RED PHASE:**
   - Write failing test for each enhancement piece
   - Verify test fails for expected reasons
   - Document expected behavior

2. **üü¢ GREEN PHASE:**
   - Implement minimal code to pass tests
   - Verify enhancement works as designed
   - Run full test suite

3. **üîµ REFACTOR PHASE:**
   - Improve code structure while maintaining tests
   - Extract reusable components
   - Update documentation

### ENFORCEMENT CHECKPOINT:
```
üö® LEVEL 2 TDD CHECKPOINT (Per Subtask)
- Failing tests written for subtask? [YES/NO]
- Test failures verified and documented? [YES/NO]
- Minimal implementation completed? [YES/NO]
- All new and existing tests passing? [YES/NO]
- Code refactored for maintainability? [YES/NO]

‚õî BLOCKED: If any NO - Return to TDD cycle
‚úÖ ALLOWED: If all YES - Continue to next subtask
```
```

### LEVEL 3: Intermediate Feature TDD

```markdown
## TDD Protocol for Level 3 (Intermediate Features)

### MANDATORY STEPS PER MODULE/COMPONENT:
1. **üî¥ RED PHASE:**
   - Write comprehensive failing tests for module
   - Include unit, integration, and acceptance tests
   - Verify all tests fail as expected
   - Document test scenarios and expected outcomes

2. **üü¢ GREEN PHASE:**
   - Implement minimal code to pass unit tests
   - Build integration between modules
   - Ensure acceptance tests pass
   - Maintain test coverage thresholds

3. **üîµ REFACTOR PHASE:**
   - Optimize performance while maintaining tests
   - Improve architecture and design patterns
   - Extract shared utilities and components
   - Update comprehensive documentation

### ENFORCEMENT CHECKPOINT:
```
üö® LEVEL 3 TDD CHECKPOINT (Per Module)
- Comprehensive test suite written? [YES/NO]
- Unit tests failing appropriately? [YES/NO]
- Integration tests covering module interactions? [YES/NO]
- Acceptance tests validating user stories? [YES/NO]
- Minimal implementation completed? [YES/NO]
- All test categories passing? [YES/NO]
- Code refactored for scalability? [YES/NO]
- Documentation updated? [YES/NO]

‚õî BLOCKED: If any NO - Return to TDD cycle
‚úÖ ALLOWED: If all YES - Continue to next module
```
```

### LEVEL 4: Complex System TDD

```markdown
## TDD Protocol for Level 4 (Complex Systems)

### MANDATORY STEPS PER IMPLEMENTATION PHASE:
1. **üî¥ RED PHASE:**
   - Write exhaustive test suite for system phase
   - Include unit, integration, system, and acceptance tests
   - Cover security, performance, and reliability scenarios
   - Verify comprehensive test failure
   - Document complete test strategy and coverage

2. **üü¢ GREEN PHASE:**
   - Implement system phase with test-driven approach
   - Build robust integration between all system components
   - Ensure all test categories pass
   - Maintain enterprise-grade test coverage
   - Validate against architectural requirements

3. **üîµ REFACTOR PHASE:**
   - Optimize for enterprise performance and scalability
   - Refine system architecture while maintaining tests
   - Extract reusable frameworks and libraries
   - Create comprehensive technical documentation
   - Ensure maintainability and extensibility

### ENFORCEMENT CHECKPOINT:
```
üö® LEVEL 4 TDD CHECKPOINT (Per Phase)
- Exhaustive test suite covering all scenarios? [YES/NO]
- Unit tests for all system components? [YES/NO]
- Integration tests for component interactions? [YES/NO]
- System tests for end-to-end workflows? [YES/NO]
- Performance tests meeting requirements? [YES/NO]
- Security tests validating threat model? [YES/NO]
- Acceptance tests validating business requirements? [YES/NO]
- Enterprise implementation completed? [YES/NO]
- All test categories passing? [YES/NO]
- System refactored for enterprise standards? [YES/NO]
- Comprehensive documentation completed? [YES/NO]

‚õî BLOCKED: If any NO - Return to TDD cycle
‚úÖ ALLOWED: If all YES - Continue to next phase
```
```

## üìã TDD INTEGRATION WITH EXISTING WORKFLOWS

### Integration Points

```mermaid
graph TD
    ExistingWorkflow["Existing Implementation<br>Workflow"] --> TDDGate["üö® TDD ENFORCEMENT<br>GATE"]
    TDDGate --> RedPhase["üî¥ RED PHASE<br>Write Failing Tests"]
    RedPhase --> GreenPhase["üü¢ GREEN PHASE<br>Minimal Implementation"]
    GreenPhase --> BluePhase["üîµ REFACTOR PHASE<br>Improve Code"]
    BluePhase --> Continue["Continue Existing<br>Workflow"]
    
    style TDDGate fill:#ff4444,stroke:#cc0000,color:white
    style RedPhase fill:#ff6666,stroke:#ff0000,color:white
    style GreenPhase fill:#66ff66,stroke:#00ff00,color:white
    style BluePhase fill:#6666ff,stroke:#0000ff,color:white
```

### Modified Implementation Templates

#### Level 1 Modified Template
```markdown
## üîß TDD FIX: [Issue Name]

### üî¥ RED PHASE
**Failing Test:**
```typescript
describe('Bug Fix: [Issue Name]', () => {
  it('should [expected behavior]', () => {
    // Arrange
    const [setup] = setupTestCase();
    
    // Act
    const result = [actionThatShouldWork]();
    
    // Assert
    expect(result).toBe([expectedValue]);
  });
});
```

**Test Failure Output:**
```
‚ùå Expected: [expected value]
‚ùå Received: [actual value]
‚ùå Reason: [description of bug]
```

### üü¢ GREEN PHASE
**Minimal Fix Implementation:**
```typescript
// Fixed implementation
[minimal code to make test pass]
```

**Test Success Output:**
```
‚úÖ Bug Fix: [Issue Name]
‚úÖ All tests passing
```

### üîµ REFACTOR PHASE
**Code Improvements:**
- [Improvement 1]
- [Improvement 2]

**Final Verification:**
‚úÖ All tests still passing
‚úÖ No regressions introduced
```

#### Level 2+ Modified Template
```markdown
## üß™ TDD IMPLEMENTATION: [Component/Feature Name]

### üî¥ RED PHASE
**Test Suite:**
```typescript
describe('[Component/Feature]', () => {
  describe('Unit Tests', () => {
    it('should [behavior 1]', () => {
      // Test implementation
    });
    
    it('should [behavior 2]', () => {
      // Test implementation  
    });
  });
  
  describe('Integration Tests', () => {
    it('should [integration behavior]', () => {
      // Integration test
    });
  });
  
  describe('Acceptance Tests', () => {
    it('should [user story behavior]', () => {
      // Acceptance test
    });
  });
});
```

**Test Failure Documentation:**
```
‚ùå Unit Tests: [X failed / Y total]
‚ùå Integration Tests: [X failed / Y total]  
‚ùå Acceptance Tests: [X failed / Y total]
‚ùå Coverage: [X%] (Target: [Y%])
```

### üü¢ GREEN PHASE
**Implementation Progress:**
- [ ] Unit test implementation
- [ ] Integration implementation
- [ ] Acceptance criteria implementation

**Test Success Documentation:**
```
‚úÖ Unit Tests: [All passing]
‚úÖ Integration Tests: [All passing]
‚úÖ Acceptance Tests: [All passing]
‚úÖ Coverage: [X%] (Target achieved)
```

### üîµ REFACTOR PHASE
**Refactoring Activities:**
- [ ] Code optimization
- [ ] Architecture improvements
- [ ] Documentation updates

**Final Verification:**
‚úÖ All tests still passing after refactoring
‚úÖ Code quality improved
‚úÖ Documentation updated
```

## üîí ENFORCEMENT MECHANISMS

### Automatic Blocking Messages

```typescript
// Pseudocode for TDD enforcement
function attemptImplementation(code: string, hasFailingTest: boolean) {
  if (!hasFailingTest) {
    throw new TDDViolationError(`
üö® TDD VIOLATION DETECTED üö®

IMPLEMENTATION BLOCKED: No failing test found.

MANDATORY ACTIONS:
1. Write failing test first
2. Show test failure output  
3. Then implement minimal solution

TDD is MANDATORY for ALL implementation tasks.
This is not optional.
    `);
  }
  
  return proceedWithImplementation(code);
}
```

### Checkpoint Verification

```markdown
## TDD CHECKPOINT VERIFICATION

### Before ANY code implementation:
- [ ] üî¥ Failing test written and documented
- [ ] üî¥ Test failure output shown
- [ ] üî¥ Expected behavior documented

### During implementation:
- [ ] üü¢ Writing minimal code only
- [ ] üü¢ Focusing on making tests pass
- [ ] üü¢ Running tests frequently

### After implementation:
- [ ] üü¢ All tests passing
- [ ] üîµ Refactoring opportunities identified
- [ ] üîµ Code quality improved
- [ ] üîµ Documentation updated

‚õî STOP: If any checkbox is unchecked
‚úÖ PROCEED: Only when all checkboxes are checked
```

## üîÑ INTEGRATION WITH MEMORY BANK

### Updated Memory Bank Documentation

```markdown
## TDD Integration in Memory Bank Files

### tasks.md Updates
- Track TDD cycle completion for each task/subtask
- Document test coverage metrics
- Link to test files and test results

### progress.md Updates  
- Record TDD cycle progress
- Note test-driven milestones
- Track refactoring improvements

### activeContext.md Updates
- Current TDD phase (RED/GREEN/REFACTOR)
- Active test scenarios
- Test coverage status
```

## üö® ZERO TOLERANCE POLICY

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚õî ABSOLUTE PROHIBITION ‚õî                           ‚îÇ
‚îÇ                                                     ‚îÇ
‚îÇ NO implementation code may be written without       ‚îÇ
‚îÇ following the complete TDD cycle:                   ‚îÇ
‚îÇ                                                     ‚îÇ
‚îÇ 1. üî¥ Failing test FIRST                           ‚îÇ
‚îÇ 2. üü¢ Minimal implementation                       ‚îÇ
‚îÇ 3. üîµ Refactor (if needed)                        ‚îÇ
‚îÇ                                                     ‚îÇ
‚îÇ This applies to ALL levels, ALL features,          ‚îÇ
‚îÇ ALL bug fixes, ALL enhancements.                   ‚îÇ
‚îÇ                                                     ‚îÇ
‚îÇ VIOLATIONS WILL RESULT IN IMPLEMENTATION BLOCKING   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## üìà TDD BENEFITS TRACKING

Track and measure TDD adoption benefits:

- **Code Quality:** Reduction in bugs post-implementation
- **Test Coverage:** Percentage of code covered by tests
- **Refactoring Safety:** Ability to safely improve code
- **Documentation:** Tests serve as living documentation
- **Confidence:** Increased confidence in code changes
- **Maintainability:** Easier to maintain and extend code

This TDD enforcement ensures that all implementation across ALL complexity levels follows test-driven practices, resulting in higher quality, more maintainable, and better-documented code.
