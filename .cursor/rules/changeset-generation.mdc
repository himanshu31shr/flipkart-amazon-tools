---
alwaysApply: false
---
# Changeset Generation Guidelines

> **TL;DR:** This rule provides comprehensive guidance for creating effective changesets that integrate with the automated release management pipeline.

## üîÑ When to Create Changesets

### Required for ALL Changes
- **New Features**: Any user-facing functionality additions
- **Bug Fixes**: Fixes that affect user experience or system behavior
- **Breaking Changes**: Any changes that could break existing functionality
- **Performance Improvements**: Optimizations that affect user experience
- **Security Fixes**: Any security-related updates

### Optional but Recommended
- **Internal Refactoring**: Large internal changes that might affect debugging
- **Dependency Updates**: Major version bumps or security updates
- **Documentation**: Significant documentation improvements
- **Developer Experience**: Changes to build process, tooling, or development workflow

### Not Required
- **Test Additions**: Pure test additions without functionality changes
- **Code Formatting**: Automated formatting or linting fixes
- **Comments**: Adding or updating code comments
- **Internal Utilities**: Private helper functions with no external impact

## üìù Changeset Creation Command

```bash
# Generate a new changeset
npm run changeset

# or directly via npx
npx changeset
```

## üéØ Semantic Versioning Guidelines

### Major Version (Breaking Changes)
- API changes that break existing functionality
- Removed features or endpoints
- Changed default behaviors that affect existing users
- Database schema changes requiring migration

**Example**:
```markdown
---
"sacred-sutra-tools": major
---

BREAKING: Remove deprecated PDF merge API in favor of new batch processing

The legacy `mergePDFs()` function has been removed. Use the new `batchProcessPDFs()` 
function which provides better error handling and progress tracking.

Migration guide:
- Replace `mergePDFs(files)` with `batchProcessPDFs(files, { operation: 'merge' })`
- Update error handling to use the new error format
```

### Minor Version (New Features)
- New features that don't break existing functionality
- New API endpoints or functions
- Enhanced functionality with backward compatibility
- New configuration options with sensible defaults

**Example**:
```markdown
---
"sacred-sutra-tools": minor
---

Add date range selection for PDF batch operations

Users can now select date ranges when performing batch operations on stored PDFs. 
This enhancement improves efficiency for users managing large numbers of files 
across multiple dates.

Features:
- Date range picker component
- Batch operations across multiple dates
- Progress tracking for long-running operations
```

### Patch Version (Bug Fixes)
- Bug fixes that don't change functionality
- Performance improvements
- Security patches
- Small enhancements that don't add new features

**Example**:
```markdown
---
"sacred-sutra-tools": patch
---

Fix PDF display showing incorrect date when date selection changes

Resolved issue where the TodaysFilesWidget was hardcoded to show current date 
files instead of respecting the selected date. PDF files now display consistently 
with the selected date in the Today's Orders page.
```

## ‚úçÔ∏è Writing Effective Changeset Descriptions

### Structure Template
```markdown
---
"sacred-sutra-tools": [major|minor|patch]
---

[Concise summary line explaining the change]

[Detailed description explaining:
- What was changed and why
- How it affects users
- Any migration steps if breaking
- Related functionality impact]

[Optional: Examples, migration guide, or additional context]
```

### Best Practices

#### ‚úÖ Do
- **Start with action verbs**: "Add", "Fix", "Update", "Remove", "Improve"
- **Be user-focused**: Explain impact on end users, not implementation details
- **Include context**: Why the change was needed
- **Provide examples**: Show before/after for breaking changes
- **Reference issues**: Link to GitHub issues or tickets when relevant
- **Use present tense**: "Add feature" not "Added feature"

#### ‚ùå Avoid
- **Technical jargon**: Focus on user impact, not implementation
- **Vague descriptions**: "Fix bug" ‚Üí "Fix PDF display date selection issue"
- **Implementation details**: Focus on what changed, not how
- **Assuming knowledge**: Explain acronyms and context
- **Multiple unrelated changes**: One changeset per logical change

### Examples by Category

#### New Feature (Minor)
```markdown
---
"sacred-sutra-tools": minor
---

Add PDF category-based sorting and Firebase storage integration

Users can now upload PDFs with automatic category-based organization and 
configurable expiration periods. Files are stored in Firebase with 
hierarchical folder structure for efficient management.

Key features:
- Drag-and-drop multiple file upload
- Automatic category detection and sorting
- Configurable retention policies
- Mobile-responsive file browser
```

#### Bug Fix (Patch)
```markdown
---
"sacred-sutra-tools": patch
---

Fix storage permission errors when accessing Firebase folders

Resolved critical issue where users encountered permission errors when 
browsing stored files. Enhanced Firebase Storage rules to properly handle 
folder-level permissions and user authentication states.
```

#### Breaking Change (Major)
```markdown
---
"sacred-sutra-tools": major
---

BREAKING: Migrate from local storage to Firebase for PDF management

PDF storage has been migrated from local file system to Firebase Storage 
for improved reliability and cross-device access. This change requires 
existing users to re-upload their files.

Migration required:
- Existing local PDFs will need to be re-uploaded
- Update any integrations using local file paths
- New Firebase configuration required for self-hosted instances

Benefits:
- Cross-device file access
- Improved backup and reliability  
- Enhanced sharing capabilities
```

## üîß Integration with Workflow

### Development Process
1. **During Development**: Focus on building the feature
2. **Before Commit**: Create changeset for the change
3. **During PR Review**: Reviewers validate changeset accuracy
4. **On Merge**: Automated release process uses changeset for versioning

### Changeset Review Checklist
- [ ] Correct semantic version type (major/minor/patch)
- [ ] Clear, user-focused description
- [ ] Includes migration steps for breaking changes
- [ ] References related issues or tickets
- [ ] Grammar and spelling are correct
- [ ] Follows project style guidelines

## üöÄ Automated Release Integration

### How Changesets Work in This Project
1. **Changeset Creation**: Developer creates changeset during development
2. **Version Calculation**: Changesets determine next version number
3. **CHANGELOG Generation**: Automatic changelog from changeset descriptions
4. **Release Creation**: Automated GitHub release with compiled changes
5. **Deployment**: Automated deployment to production environment

### Release Timeline
- **Patch Releases**: Automated on merge to main (for urgent fixes)
- **Minor Releases**: Weekly scheduled releases (new features)
- **Major Releases**: Monthly or as needed (breaking changes)

## üìã Common Changeset Patterns

### Multi-Package Changes
```markdown
---
"sacred-sutra-tools": minor
"@sacred-sutra/ui": patch
---

Add shared PDF viewer component with mobile optimization

New reusable PDF viewer component available across the application with 
enhanced mobile gesture support and improved loading performance.
```

### Related Changes
```markdown
---
"sacred-sutra-tools": patch
---

Fix date selection consistency across order and PDF components

Addresses related issues in Today's Orders page and PDF widget to ensure 
consistent date-based filtering. Both components now respect user date 
selection and update in real-time.

Fixes:
- TodaysFilesWidget now respects selected date
- Order display maintains consistency with PDF files
- Real-time updates when date selection changes
```

## üîç Validation and Quality

### Before Submitting
- [ ] Run `npm run changeset:check` to validate format
- [ ] Verify version type matches change impact
- [ ] Test that description clearly explains user impact
- [ ] Confirm all related changes are included
- [ ] Check for typos and grammar

### Common Mistakes
- **Wrong version type**: Bug fix marked as minor instead of patch
- **Missing context**: Description doesn't explain why change was needed
- **Too technical**: Focuses on code instead of user impact
- **Multiple changes**: Single changeset covering unrelated changes
- **Incomplete description**: Missing migration steps for breaking changes

---

## üìö Additional Resources

- **Changeset Documentation**: [changesets.dev](https://github.com/changesets/changesets)
- **Semantic Versioning**: [semver.org](https://semver.org)
- **Project Release Workflow**: See `docs/RELEASE_SETUP.md`
- **Conventional Commits**: Consider for commit message consistency

Remember: Good changesets create better releases and help users understand what's changed. Take time to write clear, helpful descriptions that will be valuable in the generated changelog.
