---
description: 
globs: 
alwaysApply: false
---

# TDD Rules for TypeScript/JavaScript - Cursor AI

## MANDATORY TDD Protocol
- NEVER write implementation before failing test
- ALWAYS follow Red-Green-Refactor cycle
- ALWAYS write smallest possible failing test first
- ALWAYS show failing test output before implementation

## When User Requests Code:
1. Ask: "Let's write the test first. What should this code do?"
2. Write failing test using Jest/Vitest syntax
3. Show test failure
4. Write minimal implementation to pass
5. Suggest refactoring only when tests green

## Test Structure - Use This Format:
```typescript
describe('FeatureName', () => {
  it('should [behavior] when [condition]', () => {
    // Arrange
    const input = 'test';
    
    // Act
    const result = functionUnderTest(input);
    
    // Assert
    expect(result).toBe('expected');
  });
});
```

## File Naming:
- Tests: `filename.test.ts` or `filename.spec.ts`
- Place alongside implementation files

## Required Response Pattern:
1. **Red Phase**: "Here's the failing test: [code] - Fails because: [reason]"
2. **Green Phase**: "Minimal implementation: [code] - Makes test pass by: [explanation]"
3. **Refactor Phase**: "Now refactor (tests green): [code] - Improvements: [list]"

## Testing Frameworks:
- Prefer: Jest, Vitest
- Use: `describe()`, `it()`, `expect()`, `beforeEach()`, `afterEach()`

## Test Types to Include:
- Happy path
- Edge cases  
- Error conditions
- Boundary values
- Type validation (TypeScript)

## TypeScript Specific:
- Test type safety
- Use proper typing in tests
- Test interface compliance
- Mock with proper types

## Forbidden Actions:
- Writing implementation without test
- Skipping failing test verification
- Multiple features before testing
- Suggesting "simple code doesn't need tests"

## Auto-Responses:
- "Let's write the test first"
- "Here's the failing test"
- "This should fail because..."
- "Minimal code to pass:"
- "Tests are green, let's refactor"

## Test Examples:
```typescript
// Function test
it('should add two numbers', () => {
  expect(add(2, 3)).toBe(5);
});

// Class test
it('should create user with valid data', () => {
  const user = new User('John', 25);
  expect(user.name).toBe('John');
  expect(user.age).toBe(25);
});

// Async test
it('should fetch user data', async () => {
  const user = await fetchUser(1);
  expect(user.id).toBe(1);
});

// Error test
it('should throw error for invalid input', () => {
  expect(() => divide(10, 0)).toThrow('Division by zero');
});

// Mock test
it('should call API once', () => {
  const mockFetch = jest.fn();
  callAPI(mockFetch);
  expect(mockFetch).toHaveBeenCalledTimes(1);
});
```

## Common Matchers:
- `toBe()` - strict equality
- `toEqual()` - deep equality
- `toThrow()` - error throwing
- `toHaveBeenCalled()` - mock calls
- `toBeNull()`, `toBeUndefined()` - null checks
- `toContain()` - array/string contains

## Setup/Teardown:
```typescript
describe('Feature', () => {
  beforeEach(() => {
    // Setup before each test
  });
  
  afterEach(() => {
    // Cleanup after each test
  });
});
```

## Mocking:
```typescript
// Mock module
jest.mock('./module');

// Mock function
const mockFn = jest.fn();
mockFn.mockReturnValue('result');
mockFn.mockResolvedValue(Promise.resolve('async result'));
```

ENFORCE: No implementation code without corresponding failing test. Period.