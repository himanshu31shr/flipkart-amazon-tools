name: Deployment Validation

on:
  workflow_run:
    workflows: ["Deploy"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL to validate'
        required: false
        default: 'https://himanshu31shr.github.io/flipkart-amazon-tools'
        type: string

permissions:
  contents: read
  issues: write

jobs:
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set Target URL
        id: target
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "url=${{ github.event.inputs.target_url }}" >> $GITHUB_OUTPUT
          else
            echo "url=https://himanshu31shr.github.io/flipkart-amazon-tools" >> $GITHUB_OUTPUT
          fi

      - name: Wait for Deployment Propagation
        run: |
          echo "‚è≥ Waiting for deployment to propagate..."
          sleep 30

      - name: Health Check Validation
        id: health-check
        run: |
          echo "üîç Testing health endpoint..."
          HEALTH_URL="${{ steps.target.outputs.url }}/health"
          
          # Test health endpoint
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code};TIME:%{time_total}" "$HEALTH_URL" || echo "HTTPSTATUS:000;TIME:0")
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          RESPONSE_TIME=$(echo "$RESPONSE" | grep -o "TIME:[0-9.]*" | cut -d: -f2)
          
          echo "Health endpoint HTTP status: $HTTP_STATUS"
          echo "Response time: ${RESPONSE_TIME}s"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Health check passed"
            echo "status=success" >> $GITHUB_OUTPUT
            echo "http_code=$HTTP_STATUS" >> $GITHUB_OUTPUT
            echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Health check failed with status $HTTP_STATUS"
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "http_code=$HTTP_STATUS" >> $GITHUB_OUTPUT
            echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          fi

      - name: Main Application Validation
        id: app-check
        run: |
          echo "üîç Testing main application..."
          APP_URL="${{ steps.target.outputs.url }}"
          
          # Test main application
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code};TIME:%{time_total}" "$APP_URL" || echo "HTTPSTATUS:000;TIME:0")
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          RESPONSE_TIME=$(echo "$RESPONSE" | grep -o "TIME:[0-9.]*" | cut -d: -f2)
          CONTENT=$(echo "$RESPONSE" | sed 's/HTTPSTATUS:[0-9]*;TIME:[0-9.]*$//')
          
          echo "Main app HTTP status: $HTTP_STATUS"
          echo "Response time: ${RESPONSE_TIME}s"
          
          # Check for React app indicators
          if echo "$CONTENT" | grep -q '<div id="root">'; then
            REACT_ROOT="true"
            echo "‚úÖ React root element found"
          else
            REACT_ROOT="false"
            echo "‚ö†Ô∏è React root element not found"
          fi
          
          if [ "$HTTP_STATUS" = "200" ] && [ "$REACT_ROOT" = "true" ]; then
            echo "‚úÖ Main application check passed"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Main application check failed"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
          echo "http_code=$HTTP_STATUS" >> $GITHUB_OUTPUT
          echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          echo "has_react_root=$REACT_ROOT" >> $GITHUB_OUTPUT

      - name: Performance Check
        id: performance-check
        run: |
          echo "üöÄ Testing performance..."
          APP_URL="${{ steps.target.outputs.url }}"
          
          # Measure load times for key pages
          declare -a pages=("" "/login")
          total_time=0
          page_count=0
          
          for page in "${pages[@]}"; do
            URL="${APP_URL}${page}"
            echo "Testing: $URL"
            
            TIME=$(curl -s -w "%{time_total}" -o /dev/null "$URL" || echo "0")
            echo "  Load time: ${TIME}s"
            
            # Convert to milliseconds for easier handling
            TIME_MS=$(echo "$TIME * 1000" | bc -l 2>/dev/null || echo "0")
            total_time=$(echo "$total_time + $TIME_MS" | bc -l 2>/dev/null || echo "$total_time")
            page_count=$((page_count + 1))
          done
          
          if [ "$page_count" -gt 0 ]; then
            avg_time=$(echo "scale=2; $total_time / $page_count" | bc -l 2>/dev/null || echo "0")
          else
            avg_time="0"
          fi
          
          echo "Average load time: ${avg_time}ms"
          
          # Performance threshold: 5 seconds (5000ms)
          if (( $(echo "$avg_time < 5000" | bc -l 2>/dev/null || echo "1") )); then
            echo "‚úÖ Performance check passed"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Performance check warning: Average load time ${avg_time}ms exceeds 5s"
            echo "status=warning" >> $GITHUB_OUTPUT
          fi
          
          echo "avg_load_time=$avg_time" >> $GITHUB_OUTPUT

      - name: Generate Validation Report
        run: |
          echo "üìä DEPLOYMENT VALIDATION REPORT" > validation-report.md
          echo "=======================================" >> validation-report.md
          echo "" >> validation-report.md
          echo "**Target URL:** ${{ steps.target.outputs.url }}" >> validation-report.md
          echo "**Validation Time:** $(date)" >> validation-report.md
          echo "**Workflow:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> validation-report.md
          echo "" >> validation-report.md
          echo "## Test Results" >> validation-report.md
          echo "" >> validation-report.md
          
          # Health Check Results
          if [ "${{ steps.health-check.outputs.status }}" = "success" ]; then
            echo "‚úÖ **Health Check**: PASSED" >> validation-report.md
          else
            echo "‚ùå **Health Check**: FAILED" >> validation-report.md
          fi
          echo "   - HTTP Status: ${{ steps.health-check.outputs.http_code }}" >> validation-report.md
          echo "   - Response Time: ${{ steps.health-check.outputs.response_time }}s" >> validation-report.md
          echo "" >> validation-report.md
          
          # Application Check Results
          if [ "${{ steps.app-check.outputs.status }}" = "success" ]; then
            echo "‚úÖ **Main Application**: PASSED" >> validation-report.md
          else
            echo "‚ùå **Main Application**: FAILED" >> validation-report.md
          fi
          echo "   - HTTP Status: ${{ steps.app-check.outputs.http_code }}" >> validation-report.md
          echo "   - Response Time: ${{ steps.app-check.outputs.response_time }}s" >> validation-report.md
          echo "   - React Root: ${{ steps.app-check.outputs.has_react_root }}" >> validation-report.md
          echo "" >> validation-report.md
          
          # Performance Check Results
          if [ "${{ steps.performance-check.outputs.status }}" = "success" ]; then
            echo "‚úÖ **Performance**: PASSED" >> validation-report.md
          elif [ "${{ steps.performance-check.outputs.status }}" = "warning" ]; then
            echo "‚ö†Ô∏è **Performance**: WARNING" >> validation-report.md
          else
            echo "‚ùå **Performance**: FAILED" >> validation-report.md
          fi
          echo "   - Average Load Time: ${{ steps.performance-check.outputs.avg_load_time }}ms" >> validation-report.md
          echo "" >> validation-report.md

      - name: Upload Validation Report
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation-report.md

      - name: Create Issue on Validation Failure
        if: steps.health-check.outputs.status == 'failure' || steps.app-check.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Deployment Validation Failed',
              body: `## Deployment Validation Failed
              
              The deployment validation has detected issues with the current deployment.
              
              **Target URL:** ${{ steps.target.outputs.url }}
              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
              ${report}
              
              ## Recommended Actions
              
              1. **Investigate the failing checks** listed above
              2. **Check the deployment logs** for any errors
              3. **Consider triggering a rollback** if issues persist
              4. **Monitor the application** for further issues
              
              /cc @${{ github.actor }}`,
              labels: ['deployment', 'validation-failure', 'urgent']
            });

      - name: Set Exit Code
        run: |
          if [ "${{ steps.health-check.outputs.status }}" = "failure" ] || [ "${{ steps.app-check.outputs.status }}" = "failure" ]; then
            echo "‚ùå Deployment validation failed"
            exit 1
          else
            echo "‚úÖ Deployment validation passed"
            exit 0
          fi 