name: Mobile Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 9.11.3)'
        required: true
        default: '9.11.3'
      build_android:
        description: 'Build Android APK/AAB'
        type: boolean
        default: true
      build_ios:
        description: 'Build iOS IPA'
        type: boolean
        default: true

permissions:
  contents: write
  checks: write

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  XCODE_VERSION: '15.4'

jobs:
  prepare-release:
    name: üöÄ Prepare Release Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-android: ${{ steps.inputs.outputs.build-android }}
      build-ios: ${{ steps.inputs.outputs.build-ios }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Set Build Flags
        id: inputs
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "build-android=true" >> $GITHUB_OUTPUT
            echo "build-ios=true" >> $GITHUB_OUTPUT
          else
            echo "build-android=${{ github.event.inputs.build_android }}" >> $GITHUB_OUTPUT
            echo "build-ios=${{ github.event.inputs.build_ios }}" >> $GITHUB_OUTPUT
          fi

  build-web-release:
    name: üåê Build Web Assets (Production)
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_PRODUCTION }}

      - name: Build Production Web Assets
        run: |
          echo "üèóÔ∏è Building production web assets for mobile..."
          echo "Version: ${{ needs.prepare-release.outputs.version }}"
          
          # Update version in package.json if needed
          npm version ${{ needs.prepare-release.outputs.version }} --no-git-tag-version
          
          # Build for mobile with production optimizations
          npm run build:mobile
          
          echo "‚úÖ Production web build completed"

      - name: Upload Production Web Build
        uses: actions/upload-artifact@v4
        with:
          name: web-build-production-${{ needs.prepare-release.outputs.version }}
          path: dist/
          retention-days: 30

  build-android-release:
    name: ü§ñ Build Android Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-web-release]
    if: needs.prepare-release.outputs.build-android == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_PRODUCTION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Download Production Web Build
        uses: actions/download-artifact@v4
        with:
          name: web-build-production-${{ needs.prepare-release.outputs.version }}
          path: dist/

      - name: Update Android Version
        run: |
          # Update version in build.gradle
          VERSION="${{ needs.prepare-release.outputs.version }}"
          VERSION_CODE=$(date +%s)
          
          sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" android/app/build.gradle
          sed -i "s/versionName \".*\"/versionName \"$VERSION\"/" android/app/build.gradle
          
          echo "‚úÖ Updated Android version to $VERSION (code: $VERSION_CODE)"

      - name: Sync Capacitor
        run: |
          npx cap sync android
          echo "‚úÖ Capacitor sync completed"

      - name: Grant Execute Permission
        run: chmod +x android/gradlew

      - name: Build Android AAB (Release)
        env:
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          echo "ü§ñ Building Android App Bundle (AAB) for Play Store..."
          cd android
          
          # Create keystore from secrets if available
          if [ -n "$KEYSTORE_PASSWORD" ]; then
            echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > app/release-key.keystore
            
            # Build signed AAB
            ./gradlew bundleRelease \
              -Pandroid.injected.signing.store.file=app/release-key.keystore \
              -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
              -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
              -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
            
            echo "‚úÖ Signed AAB built successfully"
          else
            # Build unsigned for testing
            ./gradlew bundleRelease
            echo "‚ö†Ô∏è Built unsigned AAB (add signing secrets for production)"
          fi

      - name: Build Android APK (Release)
        run: |
          echo "üì± Building release APK for testing..."
          cd android
          ./gradlew assembleRelease
          echo "‚úÖ Release APK built"

      - name: Upload Android AAB
        uses: actions/upload-artifact@v4
        with:
          name: android-aab-release-${{ needs.prepare-release.outputs.version }}
          path: android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 90

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-release-${{ needs.prepare-release.outputs.version }}
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 90

  build-ios-release:
    name: üçé Build iOS Release
    runs-on: macos-latest
    needs: [prepare-release, build-web-release]
    if: needs.prepare-release.outputs.build-ios == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Download Production Web Build
        uses: actions/download-artifact@v4
        with:
          name: web-build-production-${{ needs.prepare-release.outputs.version }}
          path: dist/

      - name: Update iOS Version
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          BUILD_NUMBER=$(date +%s)
          
          # Update version in Xcode project
          sed -i '' "s/MARKETING_VERSION = [^;]*/MARKETING_VERSION = $VERSION/" ios/App/App.xcodeproj/project.pbxproj
          sed -i '' "s/CURRENT_PROJECT_VERSION = [^;]*/CURRENT_PROJECT_VERSION = $BUILD_NUMBER/" ios/App/App.xcodeproj/project.pbxproj
          
          echo "‚úÖ Updated iOS version to $VERSION (build: $BUILD_NUMBER)"

      - name: Sync Capacitor
        run: |
          npx cap sync ios
          echo "‚úÖ Capacitor sync completed"

      - name: Install iOS Dependencies
        run: |
          cd ios/App
          pod install
          echo "‚úÖ CocoaPods dependencies installed"

      - name: Import Code Signing Certificate
        if: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          # Create temporary keychain
          security create-keychain -p temp_password temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p temp_password temp.keychain
          
          # Import certificate
          echo "$IOS_CERTIFICATE_BASE64" | base64 -d > certificate.p12
          security import certificate.p12 -k temp.keychain -P "$IOS_CERTIFICATE_PASSWORD" -A
          
          # Import provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          
          echo "‚úÖ Code signing setup completed"

      - name: Build iOS Archive
        run: |
          echo "üçé Building iOS archive..."
          cd ios/App
          
          if [ -n "${{ secrets.IOS_CERTIFICATE_BASE64 }}" ]; then
            # Build signed archive
            xcodebuild archive \
              -workspace App.xcworkspace \
              -scheme App \
              -configuration Release \
              -archivePath App.xcarchive \
              -allowProvisioningUpdates
            
            echo "‚úÖ iOS archive built and signed"
          else
            # Build for simulator (testing)
            xcodebuild build \
              -workspace App.xcworkspace \
              -scheme App \
              -configuration Release \
              -destination 'platform=iOS Simulator,name=iPhone 15'
            
            echo "‚ö†Ô∏è Built for simulator only (add signing secrets for App Store)"
          fi

      - name: Export iOS IPA
        if: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        run: |
          echo "üì¶ Exporting IPA..."
          cd ios/App
          
          # Create export options plist
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF
          
          xcodebuild -exportArchive \
            -archivePath App.xcarchive \
            -exportPath ./export \
            -exportOptionsPlist ExportOptions.plist
          
          echo "‚úÖ IPA exported successfully"

      - name: Upload iOS IPA
        if: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-release-${{ needs.prepare-release.outputs.version }}
          path: ios/App/export/*.ipa
          retention-days: 90

      - name: Upload iOS Archive
        if: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-archive-release-${{ needs.prepare-release.outputs.version }}
          path: ios/App/App.xcarchive
          retention-days: 90

  create-release:
    name: üéâ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-android-release, build-ios-release]
    if: always() && (needs.build-android-release.result == 'success' || needs.build-ios-release.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          release_name: Sacred Sutra Tools v${{ needs.prepare-release.outputs.version }}
          body: |
            ## üì± Sacred Sutra Tools v${{ needs.prepare-release.outputs.version }}
            
            Cross-platform e-commerce management app with native iOS and Android support.
            
            ### üöÄ What's New
            - Mobile app builds for iOS and Android
            - Optimized for barcode scanning and inventory management
            - Firebase integration with offline support
            
            ### üì¶ Downloads
            
            **Android:**
            - `app-release.aab` - For Google Play Store upload
            - `app-release.apk` - For direct installation and testing
            
            **iOS:**
            - `Sacred Sutra Tools.ipa` - For App Store upload via Xcode or Application Loader
            
            ### üîß Installation
            
            **Android APK:**
            1. Enable "Unknown sources" in Android settings
            2. Download and install the APK file
            
            **iOS IPA:**
            1. Use Xcode or Application Loader for App Store submission
            2. For testing, use Xcode to install on registered devices
            
            ### üì± System Requirements
            - **Android:** 6.0+ (API level 23)
            - **iOS:** 13.0+
            - **Permissions:** Camera (barcode scanning), Storage (file access)
            
            ---
            
            Built with ‚ù§Ô∏è using React, Capacitor, and Firebase
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-artifacts/
          asset_name: sacred-sutra-tools-mobile-${{ needs.prepare-release.outputs.version }}
          asset_content_type: application/zip