name: Release

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  release:
    name: Release Management
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
          # Use PAT if available, otherwise fall back to GITHUB_TOKEN
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

      - name: Check for changesets
        id: check-changesets
        run: |
          if [ -d ".changeset" ] && [ "$(find .changeset -name '*.md' ! -name 'README.md' | wc -l)" -gt 0 ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
            echo "üì¶ Changesets found, proceeding with release workflow"
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changesets found, skipping release workflow"
          fi

      - name: Setup Environment
        if: steps.check-changesets.outputs.has_changesets == 'true'
        uses: ./.github/actions/setup
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}

      - name: Run Release Quality Tests
        if: steps.check-changesets.outputs.has_changesets == 'true'
        run: |
          echo "üß™ Running comprehensive test suite for release validation..."
          npm run test:coverage

      - name: Create Release Pull Request or Publish to npm
        if: steps.check-changesets.outputs.has_changesets == 'true'
        id: changesets
        uses: changesets/action@v1
        with:
          # For frontend apps, we don't publish to npm, so we remove the publish step
          # This will only create release PRs when there are changesets
          title: "chore: release packages"
          commit: "chore: release packages"
          createGithubReleases: false
        env:
          # Use PAT if available for better permissions, otherwise use GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.changesets.outputs.hasChangesets == 'false' && steps.changesets.outputs.pullRequestNumber == ''
        run: |
          # Get current version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "Creating release for version v$VERSION"
          
          # Create GitHub release
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "## Changes

          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

          ## Deployment

          This release will be automatically deployed to production." \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

      - name: Manual PR Creation Fallback
        if: failure() && steps.changesets.outputs.hasChangesets == 'true'
        run: |
          echo "::notice::Automated PR creation failed due to permissions."
          echo "::notice::Please manually create a PR from the 'changeset-release/master' branch."
          echo "::notice::Or configure a Personal Access Token (PAT) in repository secrets as 'PAT'." 