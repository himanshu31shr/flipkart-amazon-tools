rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Allow seeding operations in emulator (for development only)
    function isEmulatorSeeding() {
      return true; // This should only be used in emulator environment
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUserData(data) {
      return data.keys().hasAll(['email', 'role', 'createdAt', 'lastLoginAt']) &&
        data.role in ['user', 'admin'] &&
        data.email is string &&
        data.createdAt is timestamp &&
        data.lastLoginAt is timestamp;
    }

    function isValidTransactionData(data) {
      return data.keys().hasAll(['transactionId', 'platform', 'orderDate', 'sku', 'quantity', 'sellingPrice', 'expenses', 'product', 'metadata', 'hash']) &&
        data.platform in ['amazon', 'flipkart'] &&
        data.expenses is map &&
        data.product is map &&
        data.metadata is map;
    }

    match /active-orders/{orderId} {
      allow read: if isAuthenticated() || isEmulatorSeeding();
      allow create, update: if isAuthenticated() || isEmulatorSeeding();
      allow delete: if isAuthenticated() || isEmulatorSeeding();
    }
    
    match /orders/{orderId} {
      allow read: if isAuthenticated() || isEmulatorSeeding();
      allow create, update: if isAuthenticated() || isEmulatorSeeding();
      allow delete: if isAuthenticated() || isEmulatorSeeding();
    }
    
    match /activeOrders/{orderId} {
      allow read: if isAuthenticated() || isEmulatorSeeding();
      allow create, update: if isAuthenticated() || isEmulatorSeeding();
      allow delete: if isAuthenticated() || isEmulatorSeeding();
    }

    match /categories/{categoryId} {
      allow read: if isAuthenticated() || isEmulatorSeeding();
      allow create, update: if isAuthenticated() || isEmulatorSeeding();
      allow delete: if isAuthenticated() || isEmulatorSeeding();
    }

    match /categoryGroups/{groupId} {
      allow read: if isAuthenticated() || isEmulatorSeeding();
      allow create, update: if isAuthenticated() || isEmulatorSeeding();
      allow delete: if isAuthenticated() || isEmulatorSeeding();
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isValidUserData(request.resource.data);
      allow update: if (isOwner(userId) || isAdmin()) && (
        // Allow lastLoginAt updates during login without full validation
        (request.resource.data.keys().hasOnly(['lastLoginAt']) && request.resource.data.lastLoginAt is timestamp) ||
        // Full validation for other updates
        isValidUserData(request.resource.data)
      );
      allow delete: if isAdmin();
    }
    
    match /transactions/{transactionId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && isValidTransactionData(request.resource.data);
      allow delete: if isAuthenticated() && (
        resource.data.metadata.createdBy == request.auth.uid || isAdmin()
      );
    }
    
    match /products/{productId} {
      allow read: if isAuthenticated() || isEmulatorSeeding();
      allow write: if isAuthenticated() || isEmulatorSeeding();
    }


    match /batches/{batchId} {
      allow read: if isAuthenticated() || isEmulatorSeeding();
      allow create, update: if isAuthenticated() || isEmulatorSeeding();
      allow delete: if isAuthenticated() || isEmulatorSeeding();
    }
  }
}