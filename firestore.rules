rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUserData(data) {
      return data.keys().hasAll(['email', 'role', 'createdAt', 'lastLoginAt']) &&
        data.role in ['user', 'admin'] &&
        data.email is string &&
        data.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    // User collection rules
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAdmin();
      allow update: if (isOwner(userId) || isAdmin()) && 
        isValidUserData(request.resource.data);
      allow delete: if isAdmin();
    }

    // Transaction collection rules
    match /transactions/{transactionId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // Product collection rules
    match /products/{productId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Product prices collection rules
    match /productPrices/{priceId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}